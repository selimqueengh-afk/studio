
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Any authenticated user can read public user profiles
      allow get: if isAuthenticated();
      // A user can only create or update their own profile
      allow create, update: if isAuthenticated() && request.auth.uid == userId;

      // Rules for the 'friends' subcollection within a user's document
      match /friends/{friendId} {
        // A user can read their own friends list
        allow read: if isAuthenticated() && request.auth.uid == userId;
        // A user can remove a friend from their own list
        allow delete: if isAuthenticated() && request.auth.uid == userId;
        
        // A user can be added to another user's friends list ONLY IF:
        // 1. The person doing the adding is accepting a friend request.
        // 2. A friend request from the target user (`userId`) to the authenticated user (`request.auth.uid`) exists.
        allow create: if isAuthenticated() && (
          // Scenario 1: The user is adding a friend to their OWN list.
          // This happens when accepting a request from {friendId}.
          (request.auth.uid == userId && exists(/databases/$(database)/documents/friendRequests/$(friendId)_$(userId))) ||
          // Scenario 2: The system is adding the current user to the OTHER person's list.
          // This happens when the current user accepts a request from {userId}.
          (request.auth.uid == friendId && exists(/databases/$(database)/documents/friendRequests/$(userId)_$(friendId)))
        );
      }
    }
    
    // Rules for the 'friendRequests' collection
    match /friendRequests/{requestId} {
      // A user can only interact with a friend request if their UID is part of the request ID.
      // The request ID is formatted as 'fromUid_toUid'.
      allow read, delete: if isAuthenticated() && (request.auth.uid in requestId.split('_'));
      
      // A user can only create a friend request if:
      // 1. They are authenticated.
      // 2. The 'from' field in the request matches their own UID.
      // 3. The request document ID is correctly formatted as 'fromUid_toUid'.
      allow create: if isAuthenticated() 
                    && request.resource.data.from == request.auth.uid
                    && requestId == request.resource.data.from + '_' + request.resource.data.to;
    }

    // Rules for chat rooms
    match /rooms/{roomId} {
        // Allow read/write access to a room if the user is a participant.
        // For DMs, the roomId is 'uid1_uid2', so this rule works implicitly.
        allow read, update, delete: if isAuthenticated() && (
                                    (resource.data.isDirectMessage == true && request.auth.uid in resource.data.participants) 
                                    || (resource.data.isDirectMessage != true) // Or if it's a public room
                                  );
        allow create: if isAuthenticated(); // Allow any authenticated user to create a room.

        // Rules for messages within a room
        match /messages/{messageId} {
            allow read, create: if isAuthenticated() && (
                                (get(/databases/$(database)/documents/rooms/$(roomId)).data.isDirectMessage == true && request.auth.uid in get(/databases/$(database)/documents/rooms/$(roomId)).data.participants)
                                || (get(/databases/$(database)/documents/rooms/$(roomId)).data.isDirectMessage != true)
                              );
            // Users can only update/delete their own messages (future functionality)
            allow update, delete: if isAuthenticated() && request.auth.uid == resource.data.userId;
        }
    }
  }
}
