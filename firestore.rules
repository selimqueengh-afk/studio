
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Any authenticated user can create their own user document
      allow create: if isAuthenticated() && request.auth.uid == userId;
      // Any authenticated user can read any user's profile information
      allow read: if isAuthenticated();
      // A user can only update their own document
      allow update: if isAuthenticated() && request.auth.uid == userId;
      // Users cannot be deleted
      allow delete: if false;

      // Rules for the 'friends' subcollection
      match /friends/{friendId} {
        // A user can read their own friends list
        allow read: if isAuthenticated() && request.auth.uid == userId;

        // Allow creating/deleting a friend relationship under specific conditions
        allow write: if isAuthenticated() &&
                     (
                       // Case 1: Accepting a friend request
                       // Allow adding a friend if a valid request exists where the current user is the recipient.
                       // This allows the batch write in acceptFriendRequest to succeed.
                       (request.auth.uid == userId && exists(/databases/$(database)/documents/friendRequests/$(friendId)_$(userId))) ||
                       (request.auth.uid == friendId && exists(/databases/$(database)/documents/friendRequests/$(userId)_$(friendId))) ||
                       
                       // Case 2: Removing a friend
                       // Allow deleting the friend document if you are the owner (userId) or the friend (friendId)
                       (request.auth.uid == userId || request.auth.uid == friendId)
                     );
      }
    }

    // Rules for the 'friendRequests' collection
    match /friendRequests/{requestId} {
      // Allow reading a request if you are the sender or the receiver
      allow read: if isAuthenticated() && (request.auth.uid == resource.data.from || request.auth.uid == resource.data.to);
      // Allow creating a request if you are the sender
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.from;
      // Allow deleting a request if you are the sender (canceling) or the receiver (rejecting/accepting)
      allow delete: if isAuthenticated() && (request.auth.uid == resource.data.from || request.auth.uid == resource.data.to);
      // Requests cannot be updated, only created and deleted
      allow update: if false;
    }
    
    // Rules for 'rooms' and 'messages'
    match /rooms/{roomId} {
      allow read, write: if isAuthenticated(); // More specific rules can be added here later if needed

      match /messages/{messageId} {
        allow read, create: if isAuthenticated();
        allow update, delete: if isAuthenticated() && request.auth.uid == resource.data.userId;
      }
    }
  }
}
