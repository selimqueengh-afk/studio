
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of the document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // USERS
    // Users can read/write their own user document.
    // Users can read other user's public profiles.
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId);
      
      // FRIENDS
      // A user can read/write their own friends list.
      // A user can be added to another user's friends list ONLY if a valid friend request exists.
      match /friends/{friendId} {
        allow read, write: if isOwner(userId);
        allow create: if isAuthenticated() &&
                      // Allow creating a friend document if the other user sent a request to you
                      exists(/databases/$(database)/documents/friendRequests/$(friendId)_$(userId));
      }
    }

    // ROOMS
    // Users can read/write rooms they are a participant of.
    match /rooms/{roomId} {
       allow read, create: if isAuthenticated() && resource.data.participants[request.auth.uid] == true;
       allow update: if isAuthenticated() && request.auth.uid == resource.data.creatorId;

       // MESSAGES
       // Any participant of a room can read/write messages.
       match /messages/{messageId} {
         allow read, create: if isAuthenticated() && get(/databases/$(database)/documents/rooms/$(roomId)).data.participants[request.auth.uid] == true;
       }
    }

    // FRIEND REQUESTS
    // A user can create a request if the 'from' field matches their UID.
    // A user can delete a request if the 'from' or 'to' field matches their UID.
    match /friendRequests/{requestId} {
      allow read, delete: if isAuthenticated() && (request.auth.uid == resource.data.from || request.auth.uid == resource.data.to);
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.from;
    }
  }
}
