
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users can read anyone's profile, but only write to their own.
    match /users/{userId} {
      allow read, create;
      allow update: if request.auth.uid == userId;

      // A user can manage their own friends list.
      // Another user can write to this list ONLY when accepting a friend request.
      match /friends/{friendId} {
        allow read, delete: if request.auth.uid == userId;
        allow create: if request.auth.uid == userId || 
                       // Allow user B to write to user A's friend list if...
                       // 1. user B is the one making the request (the one accepting)
                       // 2. a friend request document exists from user A to user B
                       (request.auth.uid == friendId &&
                        exists(/databases/$(database)/documents/friendRequests/$(userId)_$(friendId)));
      }
    }

    // Friend requests can be created by any authenticated user.
    // They can only be read by the sender or receiver.
    // They can only be deleted by the sender (cancel) or receiver (accept/reject).
    match /friendRequests/{requestId} {
      allow create: if request.auth.uid != null;
      allow read, delete: if request.auth.uid == resource.data.to || request.auth.uid == resource.data.from;
    }
    
    // Rules for chat rooms and messages
    match /rooms/{roomId} {
      // Allow read/write access to a room if the user is a participant
      allow read, update: if request.auth.uid in resource.data.participants;
      allow create: if request.auth.uid != null;

      match /messages/{messageId} {
        // Allow users to read messages in rooms they are part of
        allow read: if get(/databases/$(database)/documents/rooms/$(roomId)).data.participants.hasAny([request.auth.uid]);
        // Allow users to write messages only if they are the sender
        allow create: if request.auth.uid == request.resource.data.userId;
      }
    }
  }
}
