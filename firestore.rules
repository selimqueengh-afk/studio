
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users can read anyone's profile, but only write to their own.
    match /users/{userId} {
      allow read, create: if request.auth != null;
      allow update, delete: if request.auth.uid == userId;

      // Rules for the 'friends' subcollection
      match /friends/{friendId} {
        // A user can only read or delete their own friends.
        allow read, delete: if request.auth.uid == userId;
        
        // A user can only be added to another user's friend list
        // if a corresponding friend request exists and the request is being accepted by the recipient.
        allow create: if request.auth.uid == friendId &&
                       exists(/databases/$(database)/documents/friendRequests/$(userId)_$(friendId));
      }
    }

    // Rules for friend requests
    match /friendRequests/{requestId} {
      // A request can only be read by the sender or the receiver.
      allow read: if request.auth != null && (request.auth.uid == resource.data.from || request.auth.uid == resource.data.to);
      
      // A request can only be created by the sender, and the requestId must match the sender_receiver format.
      allow create: if request.auth.uid == request.resource.data.from && requestId == request.resource.data.from + '_' + request.resource.data.to;
      
      // A request can only be deleted by the sender (to cancel) or the receiver (to reject/accept).
      allow delete: if request.auth != null && (request.auth.uid == resource.data.from || request.auth.uid == resource.data.to);
    }

    // Rules for chat rooms and messages
    match /rooms/{roomId} {
      allow read, create: if request.auth != null && request.auth.uid in resource.data.participants;
      
      match /messages/{messageId} {
        allow read, create: if request.auth != null && exists(/databases/$(database)/documents/rooms/$(roomId)) && request.auth.uid in get(/databases/$(database)/documents/rooms/$(roomId)).data.participants;
      }
    }
  }
}
