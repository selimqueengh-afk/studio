
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;

      match /friends/{friendId} {
        allow read: if request.auth != null && request.auth.uid == userId;
        // Allow creating/deleting a friend document IF
        // 1. The user is authenticated.
        // 2. A corresponding friend request exists which is being deleted in the same batch.
        //    - The request must be TO the current user.
        //    - This rule is for the RECEIVER of the friend request.
        // 3. Or if the user is simply deleting a friend (the request no longer exists).
        allow write: if request.auth != null &&
                      ( (request.auth.uid == userId && 
                         existsAfter(/databases/$(database)/documents/friendRequests/$(friendId)_$(userId)) == false) ||
                        (request.auth.uid == friendId &&
                         existsAfter(/databases/$(database)/documents/friendRequests/$(userId)_$(friendId)) == false) );
      }
    }

    match /friendRequests/{requestId} {
      // A user can read a request if they are the sender or receiver
      allow read: if request.auth != null && 
                  (request.auth.uid == resource.data.from || request.auth.uid == resource.data.to);
      
      // A user can create a request if they are the sender
      // and a request from the other user doesn't already exist.
      allow create: if request.auth != null && 
                     request.auth.uid == request.resource.data.from &&
                     !exists(/databases/$(database)/documents/friendRequests/$(request.resource.data.to)_$(request.resource.data.from));

      // A user can delete a request if they are the sender (canceling) or receiver (rejecting)
      allow delete: if request.auth != null &&
                     (request.auth.uid == resource.data.from || request.auth.uid == resource.data.to);
    }

    match /rooms/{roomId} {
      // Allow read/write if the user is a participant
      allow read, write: if request.auth != null && request.auth.uid in resource.data.participants;
      
      // Allow create if the user is creating it and is a participant
      allow create: if request.auth != null && request.auth.uid in request.resource.data.participants;

      match /messages/{messageId} {
        // Inherit read/write from parent room, but also check on create
        allow read, write: if request.auth != null && get(/databases/$(database)/documents/rooms/$(roomId)).data.participants[request.auth.uid] == true;
        
        allow create: if request.auth != null && get(/databases/$(database)/documents/rooms/$(roomId)).data.participants[request.auth.uid] == true;
      }
    }
  }
}
