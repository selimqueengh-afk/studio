
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create, update: if request.auth.uid == userId;

      // A user can manage their own friends list.
      // Another user can write to this list ONLY IF
      // there is an accepted friend request between them.
      match /friends/{friendId} {
        allow read, write: if request.auth.uid == userId;
        allow write: if request.auth != null && 
                       (exists(/databases/$(database)/documents/friendRequests/$(friendId)_$(userId)) || 
                        exists(/databases/$(database)/documents/friendRequests/$(userId)_$(friendId)));
      }
    }
    
    // Friend requests can be created by anyone authenticated,
    // read by the recipient, and deleted by either party involved in the request.
    match /friendRequests/{requestId} {
      allow create: if request.auth != null && request.resource.data.from == request.auth.uid;
      allow read, delete: if request.auth != null && (request.auth.uid == resource.data.to || request.auth.uid == resource.data.from);
    }

    // Rooms can be created by authenticated users.
    // Users can only read/write messages in rooms they are participants of.
    match /rooms/{roomId} {
      allow read, write: if request.auth != null && request.auth.uid in resource.data.participants;
      
      match /messages/{messageId} {
        allow read, create: if request.auth != null && get(/databases/$(database)/documents/rooms/$(roomId)).data.participants.hasAny([request.auth.uid]);
      }
    }
  }
}
