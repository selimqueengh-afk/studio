
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function requestExists(fromId, toId) {
      return exists(/databases/$(database)/documents/friendRequests/$(fromId)_$(toId));
    }

    // Rules for 'users' collection
    match /users/{userId} {
      // Any signed-in user can read another user's profile
      allow get: if isSignedIn();
      // Only the user themselves can create or update their profile
      allow write: if isUser(userId);

      // Rules for 'friends' subcollection
      match /friends/{friendId} {
        // A user can only read their own friends list
        allow read: if isUser(userId);
        
        // This is the key change for accepting requests:
        // Allow creating a friend document if:
        // 1. The user is accepting a request (userId == request.resource.data.to)
        // 2. A valid friend request exists from the other party.
        // This allows the batch write in acceptFriendRequest to succeed.
        allow create: if (isUser(userId) && requestExists(friendId, userId)) || (isUser(friendId) && requestExists(userId, friendId));

        // A user can only delete friends from their own list
        allow delete: if isUser(userId) || isUser(friendId);
      }
    }

    // Rules for 'friendRequests' collection
    match /friendRequests/{requestId} {
      // A user can read a request if they are the sender or receiver
      allow read: if isSignedIn() && (resource.data.from == request.auth.uid || resource.data.to == request.auth.uid);
      
      // A user can create a request if they are the sender
      allow create: if isSignedIn() && request.resource.data.from == request.auth.uid;

      // A user can delete a request if they are the sender (cancel) or receiver (accept/reject)
      allow delete: if isSignedIn() && (resource.data.from == request.auth.uid || resource.data.to == request.auth.uid);
    }
    
    // Rules for 'rooms' collection
    match /rooms/{roomId} {
      allow read: if isSignedIn() && (resource.data.participants[request.auth.uid] == true || resource.data.participants.includes(request.auth.uid));
      allow create: if isSignedIn();

      match /messages/{messageId} {
        allow read, write: if isSignedIn() && (get(/databases/$(database)/documents/rooms/$(roomId)).data.participants[request.auth.uid] == true || get(/databases/$(database)/documents/rooms/$(roomId)).data.participants.includes(request.auth.uid));
      }
    }
  }
}
