
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users can read/write their own user document.
    // Users can read other users' documents.
    match /users/{userId} {
      allow read, update, delete: if request.auth.uid == userId;
      allow create: if request.auth.uid == userId;
      allow get: if request.auth != null;

      // Rules for the 'friends' subcollection
      match /friends/{friendId} {
        allow read: if request.auth.uid == userId;
        allow write, delete: if 
          // Allow adding a friend ONLY if a corresponding friend request exists
          // and the current user is the one accepting the request.
          (exists(/databases/$(database)/documents/friendRequests/$(friendId)_$(userId)) && get(/databases/$(database)/documents/friendRequests/$(friendId)_$(userId)).data.to == request.auth.uid) ||
          (exists(/databases/$(database)/documents/friendRequests/$(userId)_$(friendId)) && get(/databases/$(database)/documents/friendRequests/$(userId)_$(friendId)).data.to == request.auth.uid) ||
          // Allow the user to remove a friend from their own list
          (request.auth.uid == userId && !request.resource.data.keys().hasAny(['since']));
      }
    }

    // Rules for the 'rooms' collection and 'messages' subcollection
    match /rooms/{roomId} {
      // Allow read/write access to a room only if the user is a participant.
      allow read, write: if request.auth.uid in resource.data.participants;

      match /messages/{messageId} {
        // Allow users to read messages in rooms they are part of.
        allow read: if get(/databases/$(database)/documents/rooms/$(roomId)).data.participants.hasAny([request.auth.uid]);
        // Allow users to create messages if they are a participant and the message is from them.
        allow create: if get(/databases/$(database)/documents/rooms/$(roomId)).data.participants.hasAny([request.auth.uid]) && request.resource.data.userId == request.auth.uid;
      }
    }

    // Rules for 'friendRequests' collection
    match /friendRequests/{requestId} {
        // Allow creating a request if the sender is the authenticated user.
        allow create: if request.auth.uid == request.resource.data.from;
        
        // Allow reading a request if the user is the sender or the receiver.
        allow read: if request.auth.uid == resource.data.from || request.auth.uid == resource.data.to;
        
        // Allow deleting a request (rejecting/canceling) if the user is the receiver or the sender.
        allow delete: if request.auth.uid == resource.data.to || request.auth.uid == resource.data.from;
    }
  }
}
