rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // Users can be read by anyone signed in, but only created/updated by the user themselves.
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create, update: if isUser(userId);

      // Friends subcollection rules
      match /friends/{friendId} {
        allow read: if isUser(userId);
        // Writes to friends list are handled by the acceptFriendRequest logic below
        allow create, delete: if 
          // Allow creating a friend if accepting a request from them
          (request.resource.data.since == request.time && exists(/databases/$(database)/documents/friendRequests/$(friendId)_$(userId))) ||
          // Allow creating a friend if they are accepting a request from you
          (request.resource.data.since == request.time && exists(/databases/$(database)/documents/friendRequests/$(userId)_$(friendId))) ||
          // Allow deleting a friend record (removing a friend)
          (isUser(userId));
      }
    }

    // Friend requests
    match /friendRequests/{requestId} {
      // Allow read if user is sender or receiver
      allow read: if isSignedIn() && (resource.data.from == request.auth.uid || resource.data.to == request.auth.uid);
      // Allow create if the user is the sender and the requestId is correct
      allow create: if isUser(request.resource.data.from) && requestId == request.resource.data.from + '_' + request.resource.data.to;
      // Allow delete if user is the sender (cancel) or receiver (reject/accept)
      allow delete: if isSignedIn() && (isUser(resource.data.from) || isUser(resource.data.to));
    }
    
    // Chat rooms
    match /rooms/{roomId} {
       allow read, create: if isSignedIn() && request.auth.uid in resource.data.participants;
       
       // Messages in a room
       match /messages/{messageId} {
         allow read, create: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/rooms/$(roomId)).data.participants;
       }
    }
  }
}