
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if a user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // USERS
    match /users/{userId} {
      // Anyone can read a user's profile
      allow get: if isAuthenticated();

      // Only the user themselves can create or update their own profile
      allow create, update: if isAuthenticated() && isOwner(userId);

      // FRIENDS subcollection
      match /friends/{friendId} {
        // A user can only read their own friends list
        allow read: if isAuthenticated() && isOwner(userId);
        
        // Writing to friends list is handled by the acceptFriendRequest logic below
        allow write: if false; 
      }
    }
    
    // ROOMS (Existing rules - unchanged)
    match /rooms/{roomId} {
      allow read, write: if isAuthenticated();
      match /messages/{messageId} {
        allow read, write: if isAuthenticated();
      }
    }

    // FRIEND REQUESTS
    match /friendRequests/{requestId} {
      // Allow read if the user is either the sender or the receiver of the request
      allow get: if isAuthenticated() && (request.auth.uid == resource.data.from || request.auth.uid == resource.data.to);

      // Allow creating a request if the sender is the authenticated user
      // and the request ID format is correct (from_to)
      allow create: if isAuthenticated() && isOwner(request.resource.data.from) && requestId == request.resource.data.from + '_' + request.resource.data.to;

      // Allow deleting a request if the user is the receiver (accept/reject) or the sender (cancel)
      allow delete: if isAuthenticated() && (isOwner(resource.data.to) || isOwner(resource.data.from));

      // Friend requests cannot be updated
      allow update: if false;
    }

    // TRANSACTIONAL RULES for accepting friend requests
    // This allows the batch write in acceptFriendRequest to succeed
    match /users/{userId}/friends/{friendId} {
        // Allow a user to be added to another user's friend list ONLY IF
        // there was a corresponding friend request that is being deleted in the same transaction.
        allow create: if isAuthenticated() &&
                      existsAfter(/databases/$(database)/documents/friendRequests/$(friendId)_$(userId)) == false &&
                      get(/databases/$(database)/documents/friendRequests/$(friendId)_$(userId)).data.to == userId;
    }
  }
}
